openapi: 3.0.0
info:
  title: "User Management API"
  description: "API for managing users with authentication"
  version: "1.0.0"
servers:
  - url: "http://localhost:8000"
    description: "Local server"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        password:
          type: string
          format: password
          example: "password123"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
security:
  - BearerAuth: []
paths:
  /api/users:
    get:
      summary: "Get list of users"
      description: "Retrieve a list of all users"
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "A list of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: "Unauthorized"
    post:
      summary: "Create a new user"
      description: "Creates a new user"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "Bad Request"
  /api/users/{id}:
    get:
      summary: "Get a user by ID"
      description: "Retrieve a single user by ID"
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "User details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: "User not found"
    put:
      summary: "Update a user"
      description: "Updates a user's details"
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "Bad Request"
        '404':
          description: "User not found"
    delete:
      summary: "Delete a user"
      description: "Deletes a user by ID"
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      security:
        - BearerAuth: []
      responses:
        '204':
          description: "User deleted successfully"
        '404':
          description: "User not found"
